import pandas as pd
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
from datetime import datetime
import numpy as np
import io
import locale

# Configuration de base de Plotly
pio.templates.default = "plotly_white"
pio.renderers.default = "browser"

# D√©finir la locale pour le format fran√ßais des dates
try:
    locale.setlocale(locale.LC_TIME, 'fr_FR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_TIME, 'fr_FR')
    except:
        pass  # Si aucune locale fran√ßaise n'est disponible, on continue sans

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Analyse des Clients",
    page_icon="üìä",
    layout="wide"
)

# Titre principal
st.title("üìä Analyse de l'Activit√© des Clients")

# Sidebar pour t√©l√©charger le fichier
st.sidebar.header("Import des Donn√©es")
uploaded_file = st.sidebar.file_uploader("T√©l√©chargez votre fichier Excel", type=["xlsx", "xls"])

# Fonction pour traiter les donn√©es
def process_data(df):
    # Convertir la colonne Date en datetime en tenant compte du format fran√ßais (JJ/MM/AAAA)
    df['Date'] = pd.to_datetime(df['Date'], format='%d/%m/%Y', errors='coerce')
    
    # G√©rer les valeurs manquantes dans la colonne Date
    if df['Date'].isna().any():
        st.warning(f"Attention: {df['Date'].isna().sum()} dates n'ont pas pu √™tre converties. V√©rifiez le format des dates.")
    
    # Cr√©er une colonne pour l'ann√©e
    df['Ann√©e'] = df['Date'].dt.year
    
    # Cr√©er une colonne pour le mois
    df['Mois'] = df['Date'].dt.month
    
    # S'assurer que toutes les colonnes de type objet sont des cha√Ænes de caract√®res
    object_columns = df.select_dtypes(include=['object']).columns
    for col in object_columns:
        df[col] = df[col].astype(str)
    
    # Identifier l'ann√©e actuelle pour les calculs d'activit√©
    current_year = datetime.now().year
    
    # Identifier les clients uniques
    unique_clients = df['Id Client'].unique()
    
    # Analyser l'activit√© des clients par ann√©e
    client_activity = {}
    for client in unique_clients:
        client_years = df[df['Id Client'] == client]['Ann√©e'].unique()
        client_data = df[df['Id Client'] == client]
        
        # Calculer les m√©triques du client
        nb_commandes = len(client_data)
        total_achats = client_data['Total'].sum()
        
        # Calculer la fr√©quence des commandes par semaine
        if nb_commandes > 1:
            date_min = client_data['Date'].min()
            date_max = client_data['Date'].max()
            duree_semaines = max(1, (date_max - date_min).days / 7)
            frequence_semaine = nb_commandes / duree_semaines
        else:
            frequence_semaine = 1 if nb_commandes == 1 else 0
        
        client_activity[client] = {
            'premi√®re_ann√©e': min(client_years) if len(client_years) > 0 else None,
            'derni√®re_ann√©e': max(client_years) if len(client_years) > 0 else None,
            'ann√©es_actif': sorted(client_years),
            'actif_2024': 2024 in client_years,
            'actif_2025': 2025 in client_years,
            'nb_commandes': nb_commandes,
            'total_achats': total_achats,
            'frequence_semaine': frequence_semaine,
            'derniere_commande': client_data['Date'].max()
        }
    
    # Cr√©er un DataFrame pour l'analyse des clients
    client_df = pd.DataFrame.from_dict(client_activity, orient='index')
    client_df.reset_index(inplace=True)
    client_df.rename(columns={'index': 'Id Client'}, inplace=True)
    
    # Fusionner avec les informations client
    client_info = df[['Id Client', 'Prenom et nom', 'adresse email', 'Numero', 'N¬∞ et rue', 'Code postal', 'Ville']].drop_duplicates('Id Client')
    client_analysis = pd.merge(client_df, client_info, on='Id Client', how='left')
    
    # Identifier les cat√©gories demand√©es
    client_analysis['Cat√©gorie'] = 'Autre'
    
    # Clients depuis 2024 ou 2023 et toujours actifs (commandes en 2025, mais on ne compte que les achats √† partir de 2024)
    mask_2023_2024 = ((client_analysis['premi√®re_ann√©e'] == 2023) | (client_analysis['premi√®re_ann√©e'] == 2024)) & (client_analysis['actif_2025'] == True)
    client_analysis.loc[mask_2023_2024, 'Cat√©gorie'] = 'Clients depuis 2023/2024 et toujours actifs'
    
    # Clients depuis 2024 et plus l√† (premi√®re et derni√®re commande en 2024)
    client_analysis.loc[(client_analysis['premi√®re_ann√©e'] == 2024) & 
                       (client_analysis['derni√®re_ann√©e'] == 2024), 'Cat√©gorie'] = 'Clients depuis 2024 et plus l√†'

    # Nouveaux clients 2025 : premi√®re et derni√®re commande en 2025
    client_analysis.loc[(client_analysis['premi√®re_ann√©e'] == 2025) & 
                       (client_analysis['derni√®re_ann√©e'] == 2025), 'Cat√©gorie'] = 'Nouveaux clients 2025'

    # Pour les clients "Clients depuis 2023/2024 et toujours actifs", recalculer les m√©triques en ne prenant que les achats √† partir de 2024
    ids_2023_2024 = client_analysis.loc[mask_2023_2024, 'Id Client']
    for cid in ids_2023_2024:
        client_data = df[(df['Id Client'] == cid) & (df['Ann√©e'] >= 2024)]
        nb_commandes = len(client_data)
        total_achats = client_data['Total'].sum()
        if nb_commandes > 1:
            date_min = client_data['Date'].min()
            date_max = client_data['Date'].max()
            duree_semaines = max(1, (date_max - date_min).days / 7)
            frequence_semaine = nb_commandes / duree_semaines
        else:
            frequence_semaine = 1 if nb_commandes == 1 else 0
        derniere_commande = client_data['Date'].max() if nb_commandes > 0 else None
        client_analysis.loc[client_analysis['Id Client'] == cid, 'nb_commandes'] = nb_commandes
        client_analysis.loc[client_analysis['Id Client'] == cid, 'total_achats'] = total_achats
        client_analysis.loc[client_analysis['Id Client'] == cid, 'frequence_semaine'] = frequence_semaine
        client_analysis.loc[client_analysis['Id Client'] == cid, 'derniere_commande'] = derniere_commande
    
    return df, client_analysis

# Afficher les donn√©es si un fichier est t√©l√©charg√©
if uploaded_file is not None:
    try:
        # Lire le fichier Excel
        df = pd.read_excel(uploaded_file)
        
        # Afficher les premi√®res lignes du dataframe
        st.subheader("Aper√ßu des donn√©es")
        st.dataframe(df.head())
        
        # Standardiser les noms de colonnes pour g√©rer les variations ou espaces
        df.columns = [col.strip() for col in df.columns]
        
        # Faire correspondre les colonnes aux noms attendus
        column_mappings = {
            'DateId Client': 'Date',  # Cas o√π les colonnes seraient fusionn√©es ou mal format√©es
            'Id Client': 'Id Client',
            'Moyen de paiement': 'Moyen de Paiement',
            'email': 'adresse email',
            'Nom': 'Prenom et nom',
            'Telephone': 'Numero'
        }
        
        # Appliquer les mappings si n√©cessaire
        for old_col, new_col in column_mappings.items():
            if old_col in df.columns and new_col not in df.columns:
                df.rename(columns={old_col: new_col}, inplace=True)
        
        # V√©rifier les colonnes n√©cessaires
        required_columns = ['Date', 'Id Client', 'Total', 'adresse email', 'Prenom et nom']
        missing_columns = [col for col in required_columns if col not in df.columns]
    
        if missing_columns:
            st.error(f"Colonnes manquantes dans le fichier: {', '.join(missing_columns)}")
        else:
            # Traiter les donn√©es
            processed_df, client_analysis = process_data(df)
            
            # Afficher les r√©sultats de l'analyse
            st.subheader("Analyse des Clients")
            
            # Cr√©er des onglets pour diff√©rentes vues
            tab1, tab2, tab3 = st.tabs(["üìä Vue d'ensemble", "üîç D√©tails des Clients", "üì• Exporter les R√©sultats"])
            
            with tab1:
                # Vue d'ensemble avec des chiffres cl√©s
                col1, col2, col3 = st.columns(3)
                
                # Nombre total de clients
                with col1:
                    st.metric("Nombre Total de Clients", len(client_analysis))
                
                # Clients depuis 2023/2024 et toujours actifs
                with col2:
                    active_2024_count = len(client_analysis[client_analysis['Cat√©gorie'] == 'Clients depuis 2023/2024 et toujours actifs'])
                    st.metric("Clients depuis 2023/2024 et toujours actifs", active_2024_count)
                
                # Nouveaux clients 2025
                with col3:
                    new_2025_count = len(client_analysis[client_analysis['Cat√©gorie'] == 'Nouveaux clients 2025'])
                    st.metric("Nouveaux clients 2025", new_2025_count)
                
                # Graphique de r√©partition des cat√©gories
                category_counts = client_analysis['Cat√©gorie'].value_counts().reset_index()
                category_counts.columns = ['Cat√©gorie', 'Nombre de Clients']
                
                fig = px.pie(
                    category_counts, 
                    values='Nombre de Clients', 
                    names='Cat√©gorie',
                    title='R√©partition des Clients par Cat√©gorie',
                    color_discrete_sequence=px.colors.qualitative.Set3
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # Graphique de l'√©volution du nombre de clients par ann√©e
                client_years = processed_df.groupby(['Ann√©e', 'Id Client']).size().reset_index()
                clients_per_year = client_years.groupby('Ann√©e').size().reset_index()
                clients_per_year.columns = ['Ann√©e', 'Nombre de Clients']
                
                fig = px.bar(
                    clients_per_year,
                    x='Ann√©e',
                    y='Nombre de Clients',
                    title="√âvolution du Nombre de Clients par Ann√©e",
                    color_discrete_sequence=['#2E86C1']
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with tab2:
                # D√©tails des clients avec filtre par cat√©gorie
                st.subheader("Liste d√©taill√©e des clients")
                
                # Filtrer par cat√©gorie
                category_filter = st.selectbox(
                    "Filtrer par cat√©gorie",
                    ['Tous'] + list(client_analysis['Cat√©gorie'].unique())
                )
                
                if category_filter == 'Tous':
                    filtered_clients = client_analysis
                else:
                    filtered_clients = client_analysis[client_analysis['Cat√©gorie'] == category_filter]
                
                # Afficher le tableau filtr√© avec les m√©triques de poids
                columns_to_display = [
                    'Id Client', 'Prenom et nom', 'adresse email', 'Cat√©gorie',
                    'nb_commandes', 'total_achats', 'frequence_semaine', 'derniere_commande'
                ]
                
                # Formater les donn√©es pour l'affichage
                display_df = filtered_clients[columns_to_display].copy()
                display_df['total_achats'] = display_df['total_achats'].round(2).apply(lambda x: f"{x:,.2f} ‚Ç¨")
                display_df['frequence_semaine'] = display_df['frequence_semaine'].round(2).apply(lambda x: f"{x:.2f} / semaine")
                display_df['derniere_commande'] = display_df['derniere_commande'].dt.strftime('%d/%m/%Y')
                
                st.dataframe(
                    display_df,
                    hide_index=True,
                    column_config={
                        'nb_commandes': "Nombre de commandes",
                        'total_achats': "Total des achats",
                        'frequence_semaine': "Fr√©quence (commandes/semaine)",
                        'derniere_commande': "Derni√®re commande"
                    }
                )
                
                # D√©tails d'un client sp√©cifique
                st.subheader("D√©tails d'un client sp√©cifique")
                selected_client = st.selectbox(
                    "S√©lectionnez un client",
                    filtered_clients['Id Client'].tolist()
                )
                
                if selected_client:
                    client_details = client_analysis[client_analysis['Id Client'] == selected_client].iloc[0]
                    client_purchases = processed_df[processed_df['Id Client'] == selected_client]
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**Informations g√©n√©rales**")
                        st.write(f"Nom: {client_details['Prenom et nom']}")
                        st.write(f"Email: {client_details['adresse email']}")
                        st.write(f"T√©l√©phone: {client_details['Numero']}")
                        st.write(f"Adresse: {client_details['N¬∞ et rue']}, {client_details['Code postal']} {client_details['Ville']}")
                        st.write(f"Cat√©gorie: {client_details['Cat√©gorie']}")
                        st.write(f"Premi√®re ann√©e: {client_details['premi√®re_ann√©e']}")
                        st.write(f"Derni√®re ann√©e: {client_details['derni√®re_ann√©e']}")
                    
                    with col2:
                        st.write("**Historique des commandes**")
                        if not client_purchases.empty:
                            # Graphique d'historique des achats
                            fig = px.line(
                                client_purchases.groupby(pd.Grouper(key='Date', freq='ME')).agg({'Total': 'sum'}).reset_index(),
                                x='Date',
                                y='Total',
                                title=f"Historique des achats de {client_details['Prenom et nom']}",
                                markers=True
                            )
                            st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.write("Aucun historique d'achat disponible pour ce client.")
            
            with tab3:
                # Exportation des r√©sultats
                st.subheader("Exporter les r√©sultats de l'analyse")
                
                # Pr√©parer les donn√©es pour l'exportation
                export_data = client_analysis[['Id Client', 'Prenom et nom', 'adresse email', 'Numero', 'Cat√©gorie', 'premi√®re_ann√©e', 'derni√®re_ann√©e']]
                
                # Option pour filtrer les donn√©es √† exporter
                export_option = st.radio(
                    "Que souhaitez-vous exporter ?",
                    ['Tous les clients', 'Clients depuis 2023/2024 et toujours actifs', 'Clients depuis 2024 et plus l√†', 'Nouveaux clients 2025']
                )
                
                if export_option != 'Tous les clients':
                    export_data = export_data[export_data['Cat√©gorie'] == export_option]
                
                # Bouton pour d√©clencher l'exportation Excel
                buffer = io.BytesIO()
                
                with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                    export_data.to_excel(writer, sheet_name='Analyse Clients', index=False)
                
                buffer.seek(0)
                
                st.download_button(
                    label="üì• T√©l√©charger l'analyse en Excel",
                    data=buffer,
                    file_name=f"analyse_clients_{datetime.now().strftime('%Y%m%d')}.xlsx",
                    mime="application/vnd.ms-excel"
                )
                
                # Option pour exporter des graphiques
                st.write("**Exporter des graphiques**")
                
                try:
                    # Cr√©er un graphique pour l'exportation avec une configuration optimis√©e
                    fig = px.pie(
                        category_counts, 
                        values='Nombre de Clients', 
                        names='Cat√©gorie',
                        title='R√©partition des Clients par Cat√©gorie',
                        color_discrete_sequence=px.colors.qualitative.Set3,
                        width=1200,
                        height=800
                    )
                    
                    # Afficher le graphique avec les outils d'export
                    st.plotly_chart(fig, use_container_width=True)
                    
                    st.info("""
                    Pour t√©l√©charger le graphique :
                    1. Survolez le graphique
                    2. Cliquez sur l'ic√¥ne appareil photo üì∏ dans la barre d'outils
                    3. Choisissez "Download plot as PNG"
                    """)
                    
                except Exception as e:
                    st.error(f"Erreur lors de la cr√©ation du graphique : {str(e)}")
                
    except Exception as e:
        st.error(f"Une erreur s'est produite lors du traitement du fichier: {e}")
else:
    # Afficher des instructions si aucun fichier n'est t√©l√©charg√©
    st.info("Veuillez t√©l√©charger votre fichier Excel pour commencer l'analyse.")
    
    # Exemple de format attendu
    st.subheader("Format de donn√©es attendu")
    example_data = {
        'Date': ['01/10/2023', '29/10/2023', '12/11/2023', '16/12/2023', '11/02/2024'],
        'Id Client': [1001, 1001, 1001, 1001, 1001],
        'Moyen de Paiement': ['Esp√®ce', 'Esp√®ce', 'Esp√®ce', 'Esp√®ce', 'Esp√®ce'],
        'Total': [0, 0, 0, 0, 0],
        'adresse email': ['', '', '', '', 'mariamafallwathie@gmail.com'],
        'Prenom et nom': ['Mme wathie', 'Mme Wathie', 'Fall', 'Fall', 'mme wathie'],
        'Numero': ['624748439', '624847439', '624847439', '624847439', '624748439'],
        'N¬∞ et rue': ['5rue Jule Massenet', '5rue', '5 Rue Jules Mas', '5rue jules masse', '5rue'],
        'Code postal': ['', '78330', '78330', '78330', '78330'],
        'Ville': ['', 'Fontenay Le Fleury', 'Fontenay', 'Fontenay Le Fleury', 'Fontenay Le Fleury']
    }
    for key in example_data:
        example_data[key] = [str(val) if pd.notna(val) else '' for val in example_data[key]]
    example_df = pd.DataFrame(example_data)
    st.dataframe(example_df)
    
    # Instructions d'utilisation
    st.subheader("Instructions d'utilisation")
    st.markdown("""
    1. T√©l√©chargez votre fichier Excel en utilisant le bouton dans la barre lat√©rale gauche
    2. L'application analysera automatiquement vos donn√©es et identifiera:
       - Les clients qui sont avec vous depuis 2024 et toujours actifs
       - Les clients arriv√©s en 2025 et plus l√† (inactifs)
    3. Vous pourrez visualiser les r√©sultats sous forme de graphiques et tableaux
    4. Explorez les d√©tails de chaque client en les s√©lectionnant dans la liste
    5. Exportez les r√©sultats au format Excel ou les graphiques au format image
    
    **Note importante:** L'application traite les dates au format fran√ßais (JJ/MM/AAAA). Assurez-vous que vos dates sont dans ce format.
    """)

# Pied de page
st.markdown("---")
st.markdown("BMW")